parameters:
  unityProject: true

steps:
- ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
  - ${{ if eq(parameters.unityProject, 'true') }}:
    - bash: |
        npm pack 2>/dev/null
        tarball=$(find . -name "*.tgz")
        tarballFilePaths=$(tar -tf $tarball)

        while read -r filePath
        do
          case $filePath in
            *.meta)
              metaFilePath=$filePath
              found=false
              regularFilePath=${metaFilePath%.meta}
              while read -r otherFilePath
              do
                case $otherFilePath in
                  $regularFilePath/* | $regularFilePath*) # folder or file
                    if [ "$metaFilePath" != "$otherFilePath" ]
                    then
                      found=true
                      break
                    fi;;
                esac
              done <<< "$tarballFilePaths"
              if [ "$found" = false ]
              then
                echo "Missing file for Unity meta file '${metaFilePath#"package/"}'." >&2
              fi;;
            *)
              regularFilePath=$filePath
              found=false
              while read -r otherFilePath
              do
                case $otherFilePath in
                  $regularFilePath.meta)
                    found=true
                    break;;
                esac
              done <<< "$tarballFilePaths"
              if [ "$found" = false ]
              then
                echo "Missing Unity meta file for file '${regularFilePath#"package/"}'." >&2
              fi;;
          esac
        done <<< "$tarballFilePaths"

        rm -f $tarball
      displayName: Check Unity .meta files
      failOnStderr: true
  - bash: |
      mv -f package.json package.json.original
      cat > package.json <<- "EOF"
      {
        "name": "io.extendreality.devops-dependencies",
        "displayName": "DevOps-Dependencies",
        "description": "A temporary package to install needed dev-dependencies.",
        "version": "0.0.0-development",
        "homepage": "https://github.com/ExtendRealityLtd/DevOps/",
        "bugs": {
          "url": "https://github.com/ExtendRealityLtd/DevOps/issues"
        },
        "repository": "github:ExtendRealityLtd/DevOps",
        "license": "MIT",
        "author": {
          "name": "Extend Reality Ltd",
          "email": "hello@extendreality.io",
          "url": "https://github.com/ExtendRealityLtd"
        },
        "devDependencies": {
          "conventional-changelog-conventionalcommits": "^4.2.1",
          "semantic-release": "^16.0.0-beta.25",
          "@semantic-release/commit-analyzer": "^7.0.0-beta.4",
          "@semantic-release/release-notes-generator": "^7.3.1",
          "@semantic-release/changelog": "^3.0.4",
          "@semantic-release/npm": "^6.0.0-beta.1",
          "@semantic-release/git": "^7.1.0-beta.6",
          "@semantic-release/exec": "^3.4.0-beta.5",
          "@semantic-release/github": "^5.6.0-beta.2",
          "bestzip": "^2.1.4"
        }
      }
      EOF
    displayName: Replace package.json temporarily for npm dev-dependencies
  - task: Npm@1
    displayName: Install npm package dev dependencies
    inputs:
      command: custom
      verbose: false
      customCommand: install --only=dev
      customRegistry: useFeed
      customFeed: $(Azure.FeedId)
  - bash: mv -f package.json.original package.json
    displayName: Bring back original package.json
  - bash: |
      cat > semantic-release.config.js <<- "EOF"
      parserOpts = {
        revertPattern: '/^(?:Revert|revert:)\\s\'?([\\s\\S]+?)\'?\\s*This reverts commit (\\w*)\\./'
      };
      module.exports = {
        branches: [
          '+([0-9])?(.{+([0-9]),x}).x',
          { name: 'master', channel: false },
          { name: 'next', channel: false, prerelease: 'next' },
          { name: 'next-major', channel: false, prerelease: 'next-major' }
        ],
        tagFormat: 'v${version}',
        plugins: [
          ['@semantic-release/commit-analyzer', {
            preset: 'conventionalcommits',
            parserOpts,
            releaseRules: [
              { breaking: true, release: 'major' },
              { revert: true, release: 'patch' },
              { type: 'feat', release: 'minor' },
              { type: 'fix', release: 'patch' },
              { type: 'perf', release: 'patch' }
            ]
          }],
          ['@semantic-release/release-notes-generator', {
            preset: 'conventionalcommits',
            parserOpts,
            writerOpts: {
              finalizeContext: (context) => {
                const prefix = '  > '
                context.noteGroups.forEach(group => {
                  group.notes.forEach(note => {
                    if (note.text) {
                      note.text = note.text.split('\n\n').map(paragraph => paragraph.split('\n').join(' ')).join('\n\n')
                    }
                  })
                })
                context.commitGroups.forEach(group => {
                  group.commits.forEach(commit => {
                    if (commit.body) {
                      commit.body = prefix + commit.body.split('\n\n').map(paragraph => paragraph.split('\n').join(' ')).join('\n' + prefix + '\n' + prefix)
                    }
                  })
                  group.commits = group.commits.filter(commit => !(commit.type == 'Miscellaneous Chores' && commit.scope == 'release'))
                })
                context.commitGroups = context.commitGroups.filter(group => group.commits.length > 0)
                return context
              },
              mainTemplate: `
      {{> header}}
      {{#if noteGroups}}
      {{#each noteGroups}}

      #### :warning: {{title}} :warning:

      {{#each notes}}
      * {{#if commit.scope}}**{{commit.scope}}:** {{/if}}{{text}}
      {{~!-- commit link --}} {{#if @root.linkReferences~}}
        ([{{commit.shortHash}}](
        {{~#if @root.repository}}
          {{~#if @root.host}}
            {{~@root.host}}/
          {{~/if}}
          {{~#if @root.owner}}
            {{~@root.owner}}/
          {{~/if}}
          {{~@root.repository}}
        {{~else}}
          {{~@root.repoUrl}}
        {{~/if}}/
        {{~@root.commit}}/{{commit.hash}}))
      {{~else}}
        {{~commit.shortHash}}
      {{~/if}}

      {{/each}}
      {{/each}}
      {{/if}}

      {{~#each commitGroups}}
      {{#if title}}

      #### {{title}}

      {{/if}}
      {{#each commits}}
      {{> commit root=@root}}
      {{/each}}
      {{/each}}
      `,
              commitPartial: `*{{#if scope}} **{{scope}}:**
      {{~/if}} {{#if subject}}
        {{~subject}}
      {{~else}}
        {{~header}}
      {{~/if}}

      {{~!-- commit link --}} {{#if @root.linkReferences~}}
        ([{{shortHash}}](
        {{~#if @root.repository}}
          {{~#if @root.host}}
            {{~@root.host}}/
          {{~/if}}
          {{~#if @root.owner}}
            {{~@root.owner}}/
          {{~/if}}
          {{~@root.repository}}
        {{~else}}
          {{~@root.repoUrl}}
        {{~/if}}/
        {{~@root.commit}}/{{hash}}))
      {{~else}}
        {{~shortHash}}
      {{~/if}}

      {{~!-- commit references --}}
      {{~#if references~}}
        , closes
        {{~#each references}} {{#if @root.linkReferences~}}
          [
          {{~#if this.owner}}
            {{~this.owner}}/
          {{~/if}}
          {{~this.repository}}#{{this.issue}}](
          {{~#if @root.repository}}
            {{~#if @root.host}}
              {{~@root.host}}/
            {{~/if}}
            {{~#if this.repository}}
              {{~#if this.owner}}
                {{~this.owner}}/
              {{~/if}}
              {{~this.repository}}
            {{~else}}
              {{~#if @root.owner}}
                {{~@root.owner}}/
              {{~/if}}
                {{~@root.repository}}
              {{~/if}}
          {{~else}}
            {{~@root.repoUrl}}
          {{~/if}}/
          {{~@root.issue}}/{{this.issue}})
        {{~else}}
          {{~#if this.owner}}
            {{~this.owner}}/
          {{~/if}}
          {{~this.repository}}#{{this.issue}}
        {{~/if}}{{/each}}
      {{~/if}}

      {{#if body}}
      {{body}}
      {{/if}}
      `,
              commitGroupsSort: (a, b) => {
                const order = [
                  'Features',
                  'Bug Fixes',
                  'Performance Improvements',
                  'Documentation',
                  'Tests',
                  'Code Refactoring',
                  'Styles',
                  'Build System',
                  'Continuous Integration',
                  'Miscellaneous Chores'
                ]
                const indexA = order.indexOf(a.title)
                const indexB = order.indexOf(b.title)
                if (indexA >= indexB) {
                  return 1
                } else {
                  return -1
                }
              }
            },
            presetConfig: {
              types: [
                { type: 'feat', section: 'Features' },
                { type: 'fix', section: 'Bug Fixes' },
                { type: 'perf', section: 'Performance Improvements' },
                { type: 'docs', section: 'Documentation' },
                { type: 'test', section: 'Tests' },
                { type: 'refactor', section: 'Code Refactoring' },
                { type: 'style', section: 'Styles' },
                { type: 'build', section: 'Build System' },
                { type: 'ci', section: 'Continuous Integration' },
                { type: 'chore', section: 'Miscellaneous Chores' }
              ]
            }
          }],
          ['@semantic-release/changelog', {
            changelogFile: 'CHANGELOG.md',
            changelogTitle: '# Changelog'
          }],
          ['@semantic-release/npm', {
            pkgRoot: '.',
            tarballDir: '.'
          }],
          ['@semantic-release/git', {
            message: 'chore(release): set version to ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}',
            assets: [
              'CHANGELOG.md',
              'package.json'
            ]
          }],
          ['@semantic-release/exec', {
            publishCmd: 'bash npm-tarball-to-zip.sh'
          }],
          ['@semantic-release/github', {
            assets: '*.zip',
            labels: 'failed-release',
            releasedLabels: 'released'
          }]
        ]
      };
      EOF
    displayName: Create semantic-release.config.js
  - bash: |
      cat > npm-tarball-to-zip.sh <<- "EOF"
      tarball=$(npm list --depth 0 | sed "s/@/-/g; s/ .*/.tgz/g; 1q;")
      zipName=$(echo $tarball | sed -e "s/\.[^.]*$//").zip
      files=$(tar -tf $tarball | sed "s/^package\\///")
      npx --no-install --cache ../node_modules bestzip $zipName $files
      rm $tarball
      EOF
    displayName: Create npm-tarball-to-zip.sh
  # Using bash to run semantic-release doesn't continue after loading all the plugins.
  - powershell: npx semantic-release --extends "./semantic-release.config.js"
    displayName: Run semantic-release
    env:
      GITHUB_TOKEN: $(GitHub.Token)
      NPM_TOKEN: $(Npm.Token)
      npm_config_access: public
